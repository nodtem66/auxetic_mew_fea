'''
Generate arrow head structure
'''
import math
from os.path import basename

# ==== Design parameters from Images ==========================================
# CHANGE Here
# =============================================================================
A = 0.200 #mm
B = 0.100 #mm
alpha = 45 # degree
X_repetitions = 10 #number of unit cells in x-direction
Y_repetitions = 10 #number of unit cells in y-direction

# Printing parameters =========================================================
CTS = 290 # critical translational speed [mm/min] 
layers = 2 # number of layers [layers]
n_stablization_lines = 10 # lines before printing the actual design [lines]
# -----------------------------------------------------------------------------

# checking the validity of parameters
tan = lambda deg : math.tan(math.radians(deg))
sin = lambda deg : math.sin(math.radians(deg))
cos = lambda deg : math.cos(math.radians(deg))
dAy = A*cos(alpha/2) 
dAx = A*sin(alpha/2)

assert alpha > 0 and alpha < 90, f'0 < alpha = {alpha} < 90'
assert X_repetitions > 0 and Y_repetitions > 0
assert X_repetitions % 2 == 0 and Y_repetitions % 2 == 0
assert B**2 - dAx**2 > 0

dBx = dAx
dBy = math.sqrt(B**2 - dAx**2)
total_x = 2*X_repetitions*dAx
total_y = Y_repetitions * (dAy-dBy) + dBy

print(f'dAy/dAx: {dAy}/{dAx}')
print(f'dBy/dBx: {dBy}/{dBx}')
print(f'total_x: {total_x}')
print(f'total_y: {total_y}')

from datetime import datetime
today = datetime.now()
today_str = today.strftime('%Y%m%d-%H%M%S')
filename = f'arrowhead-horz_nx{X_repetitions}ny{Y_repetitions}nL{layers}_cts{CTS}_{today_str}.gcode'

print(f'Generating script for: {CTS} mm/min')
print(f'Filename: {filename}')

def border(f, wx, hy, speed=CTS):
  f.write('; Border\n')
  f.write(f'G0 X{wx} F{speed}\n')
  f.write(f'G0 Y{hy} F{speed}\n')
  f.write(f'G0 X{-wx} F{speed}\n')
  f.write(f'G0 Y{-hy} F{speed}\n\n')

def stabilization_lines(f, wx, ystep=0.1, speed=CTS, n=n_stablization_lines):
  f.write('; Stabilization line\n')
  for i in range(n):
    f.write(f'G0 X{wx} F{speed}\n')
    f.write(f'G0 Y{ystep} F{speed}\n')
    f.write(f'G0 X{-wx} F{speed}\n')
    f.write(f'G0 Y{ystep} F{speed}\n\n')
  f.write(f'G0 Y{2*ystep} F{speed}\n\n')

def handle(f, nx, ny, w, h, speed=CTS):
  # number of x lines = 2*nx + 1, number of x step = 2*nx
  # number of y lines = 2*ny, number of y step = 2*ny - 1
  dx = w/(2*nx)
  dy = h/(2*ny-1)
  f.write('; Left-side Handle')
  f.write(f'G0 Y{h} F{speed}\n')
  for i in range(nx):
    f.write(f'G0 X{dx} F{speed}\n')
    f.write(f'G0 Y{-h} F{speed}\n')
    f.write(f'G0 X{dx} F{speed}\n')
    f.write(f'G0 Y{h} F{speed}\n')
  last_i = ny - i
  for i in range(ny):
    f.write(f'G0 X{-w} F{speed}\n')
    f.write(f'G0 Y{-dy} F{speed}\n')
    f.write(f'G0 X{w} F{speed}\n')
    if i < last_i:
      f.write(f'G0 Y{-dy} F{speed}\n')
  f.write('; END Left-side Handle')

def main():
  with open(filename, 'w') as f:
    f.write(f'; Auxetic arrowhead with horizontal direction\n')
    f.write(f'; Generated by {basename(__file__)}\n')
    f.write(f'; CTS: {CTS}\n')
    f.write(f'; A: {A}\n')
    f.write(f'; B: {B}\n')
    f.write(f'; alpha: {alpha}\n')
    f.write(f'; Y_repetitions: {Y_repetitions}\n')
    f.write(f'; X_repetitions: {X_repetitions}\n')
    f.write(f'; layers: {layers}\n')
    # f.write(f'; total_x: {total_x}\n')
    # f.write(f'; total_y: {total_y}\n')
    
    f.write(f'; start gcode\n')
    f.write(f'; Relative positioning\n')
    f.write(f'G91\n; start at bottom-left corner\nG0 X0 Y0\n\n')

    stabilization_lines(f, total_x)

    #border(f, total_x, total_y)

    #printing the construct
    n = layers
    for l in range(n):
      f.write(f"\n; START layer {l+1}/{n}\n")
      for j in range(Y_repetitions):
        f.write(f'G1 X{dBx} Y{-dBy} F{CTS}\n')
        for i in range(X_repetitions):
          f.write(f'G1 X{dBx} Y{dBy} F{CTS}\n')
          f.write(f'G1 X{dBx} Y{-dBy} F{CTS}\n')
        for i in range(X_repetitions):
          f.write(f'G1 X{-dAx} Y{dAy} F{CTS}\n')
          f.write(f'G1 X{-dAx} Y{-dAy} F{CTS}\n')
        f.write(f'G1 X{-dAx} Y{dAy} F{CTS}\n')
      if l > n - 1:
        # move to the origin
        f.write(f'G0 Y-{total_y-dBy} F{CTS}\n')
        f.write(f'; END layer {l+1}/{n}\n\n')

    # move to parking position
    f.write(f'G0 Y3 F{CTS}\n')
    f.write(f'G90\n\n')
    f.write(f'; end gcode\n')

if __name__ == '__main__':
  main()