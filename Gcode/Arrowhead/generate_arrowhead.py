'''
Generate arrow head structure
Parameters: A, B, alpha, X_repetitions, Y_repetitions, CTS, layers, number_scaffold, offset_bw_scaffold, enable_border, filename
'''
import math
from os.path import basename

#***** Design parameters from Images ****
A = 0.200*5 #mm
B = 0.100*5 #mm
alpha = 45 # degree
X_repetitions = 16 #number of unit cells in x-direction
Y_repetitions = 20 #number of unit cells in y-direction
# 10 26

#***** Printing parameters ******
#diameter=3 # Diameter of tube mm 
CTS = 150 # [mm/min]
layers = 10 # CHANGE
number_scaffold = 4 # Number of scaffold layers
offset_bw_scaffold = 2 # [mm] Offset between scaffolds
enable_border = False

# checking the validity of parameters
tan = lambda deg : math.tan(math.radians(deg))
sin = lambda deg : math.sin(math.radians(deg))
cos = lambda deg : math.cos(math.radians(deg))
dAy = A*cos(alpha/2) 
dAx = A*sin(alpha/2)

assert alpha > 0 and alpha < 90, f'0 < alpha = {alpha} < 90'
assert X_repetitions > 0 and Y_repetitions > 0
assert B**2 - dAx**2 > 0

dBx = dAx
dBy = math.sqrt(B**2 - dAx**2)
total_x = 2*X_repetitions*dAx
total_y = Y_repetitions * (dAy-dBy) + dBy

print(f'dAy/dAx: {dAy}/{dAx}')
print(f'dBy/dBx: {dBy}/{dBx}')
print(f'total_x: {total_x}')
print(f'total_y: {total_y}')

from datetime import datetime
today = datetime.now()
today_str = today.strftime('%Y%m%d')
extra = '-border' if enable_border else ''
filename = f'arrowhead_nx{X_repetitions}-ny{Y_repetitions}-nL{layers}{extra}_cts{CTS}_{today_str}.gcode'
#filename = 'test.gcode'

print(f'Generating script for: {CTS} mm/min')
print(f'Filename: {filename}')

def border(f, speed=CTS):
  f.write('; Border\n')
  f.write(f'G0 X{-(total_x - dAx)} F{speed}\n')
  f.write(f'G0 Y{total_y} F{speed}\n')
  f.write(f'G0 X{total_x} F{speed}\n')
  f.write(f'G0 Y{-total_y} F{speed}\n')
  f.write(f'G0 X{-(total_x - dAx)} F{speed}\n\n')

def stabilization_lines(f, wx, ystep=0.3, speed=CTS, n=5):
  f.write('; Stabilization line\n')
  for i in range(n):
    f.write(f'G0 X{wx} F{speed}\n')
    f.write(f'G0 Y{ystep} F{speed}\n')
    f.write(f'G0 X{-wx} F{speed}\n')
    f.write(f'G0 Y{ystep} F{speed}\n\n')
  f.write(f'G0 Y{2*ystep} F{speed}\n\n')

def handle(f, nx, ny, w, h, speed=CTS):
  # number of x lines = 2*nx + 1, number of x step = 2*nx
  # number of y lines = 2*ny, number of y step = 2*ny - 1
  dx = w/(2*nx)
  dy = h/(2*ny-1)
  f.write('; Left-side Handle')
  f.write(f'G0 Y{h} F{speed}\n')
  for i in range(nx):
    f.write(f'G0 X{dx} F{speed}\n')
    f.write(f'G0 Y{-h} F{speed}\n')
    f.write(f'G0 X{dx} F{speed}\n')
    f.write(f'G0 Y{h} F{speed}\n')
  last_i = ny - i
  for i in range(ny):
    f.write(f'G0 X{-w} F{speed}\n')
    f.write(f'G0 Y{-dy} F{speed}\n')
    f.write(f'G0 X{w} F{speed}\n')
    if i < last_i:
      f.write(f'G0 Y{-dy} F{speed}\n')
  f.write('; END Left-side Handle')

with open(filename, 'w') as f:
  f.write(f'; Auxetic arrowhead\n')
  f.write(f'; Generated by {basename(__file__)}\n')
  f.write(f'; CTS: {CTS}\n')
  f.write(f'; A: {A}\n')
  f.write(f'; B: {B}\n')
  f.write(f'; alpha: {alpha}\n')
  f.write(f'; Y_repetitions: {Y_repetitions}\n')
  f.write(f'; X_repetitions: {X_repetitions}\n')
  f.write(f'; layers: {layers}\n')
  # f.write(f'; total_x: {total_x}\n')
  # f.write(f'; total_y: {total_y}\n')
  
  f.write(f'; start gcode\n')
  f.write(f'; Relative positioning\n')
  f.write(f'G91\n; start at bottom-left corner\nG0 X0 Y0\n\n')

  stabilization_ystep = 0.3
  stabilization_n = 5

  def new_speed(CTS, layer):
    assert layer >= 0, 'layer must be >= 0'
    if layer <= 15:
      decreased_speed = 0.015 * layer * CTS
    else:
      decreased_speed = 0.02 * layer * CTS
    return CTS - decreased_speed

  #printing the construct
  n = layers

  for s in range(number_scaffold):
    f.write(f'; START scaffold {s+1}/{number_scaffold}\n')
    stabilization_lines(f, total_x, stabilization_ystep, CTS, stabilization_n)
    f.write(f'G0 X{dAx} F{CTS}\n')
    for l in range(n):
      f.write(f"\n; START layer {l+1}/{n}\n")
      speed = new_speed(CTS, l)
      last_i = X_repetitions - 1
      for i in range(X_repetitions):
        for j in range(Y_repetitions):
          f.write(f'G1 X{-dAx} Y{dAy} F{CTS}\n')
          f.write(f'G1 X{dBx} Y{-dBy} F{CTS}\n')
        for j in range(Y_repetitions):
          f.write(f'G1 X{dBx} Y{dBy} F{CTS}\n')
          f.write(f'G1 X{-dAx} Y{-dAy} F{CTS}\n')
        if i < last_i:
          f.write(f'G1 X{dBx} Y{dBy} F{CTS}\n')
          f.write(f'G1 X{dBx} Y{-dBy} F{CTS}\n')
      # move to origin of layer
      if enable_border:
        border(f)
      else:
        f.write(f'G0 Y-3\n')
        f.write(f'G0 X{-(2*(X_repetitions-1))*dAx}\n')
        f.write(f'G0 Y3\n')
      f.write(f"\n; END layer {l+1}/{n}\n\n\n")
    
    f.write('; move to top-left corner\n')
    f.write(f'G0 X{-dAx} F{CTS}\n')
    
    f.write(f'G0 Y{-2 * (stabilization_n+1) * stabilization_ystep} F{CTS}\n')
    if s < number_scaffold - 1:
      f.write(f'G0 X{total_x + offset_bw_scaffold} F{CTS}\n')
    f.write(f'; END scaffold {s+1}/{number_scaffold}\n\n')
  f.write(f'G90\n\n')
  f.write(f'M42 P0 S0\n')
  f.write(f'G0 Z10\n')
  f.write(f'; end gcode\n')