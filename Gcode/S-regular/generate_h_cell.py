"""
Design: H_CELL
Author: Ã“scar Lecina Tejero, Jirawat Iamsamang
Parameters: A, B, alpha, X_repetitions, Y_repetitions, CTS, number_scaffold, offset_bw_scaffold, layers, x_sep, y_sep, filename
"""
from os.path import basename
from datetime import datetime

# ***** Design parameters from Images ****
A = 0.15           # [mm]
B = 0.25           # [mm]
# comment
alpha = 1          # x-y cell shape factor
X_repetitions = 12  # number of unit cells in x-direction
Y_repetitions = 12  # number of unit cells in y-direction

# ***** Printing parameters ******
CTS = 150               # [mm/min]
layers = 10             # [-]
number_scaffold = 4     # number of scaffold
offset_bw_scaffold = 2  # [mm] offset between scaffold and structure
x_sep = B # [mm]
y_sep = 4 * A + alpha * B # [mm]

# checking the validity of parameters
assert X_repetitions > 0 and Y_repetitions > 0

x_pore_size = 4 * A + 2 * B
y_pore_size = 4 * A + 2 * B * alpha

total_x = x_pore_size * X_repetitions
total_y = y_pore_size * Y_repetitions

print(f'total_x: {total_x}')
print(f'total_y: {total_y}')

today = datetime.now()
today_str = today.strftime('%Y%m%d')
filename = f'hcell_nx{X_repetitions}-ny{Y_repetitions}-nL{layers}_cts{CTS}_{today_str}.gcode'

print(f'Generating script for: {CTS} mm/min')
print(f'Filename: {filename}')


def stabilization_lines(f, wx, ystep=0.3, speed=CTS, n=5):
  f.write('; Stabilization line\n')
  for i in range(n):
    f.write(f'G0 X{wx} F{speed}\n')
    f.write(f'G0 Y{ystep} F{speed}\n')
    f.write(f'G0 X{-wx} F{speed}\n')
    f.write(f'G0 Y{ystep} F{speed}\n\n')
  f.write(f'G0 Y{2*ystep} F{speed}\n\n')

def main():
  with open(filename, 'w') as f:
    f.write(f'; h_cell design\n')
    f.write(f'; Generated by {basename(__file__)}\n')
    f.write(f'; CTS: {CTS}\n')
    f.write(f'; A: {A}\n')
    f.write(f'; B: {B}\n')
    f.write(f'; alpha: {alpha}\n')
    f.write(f'; y - pore_size: {y_pore_size}\n')
    f.write(f'; x - pore_size: {x_pore_size}\n')
    f.write(f'; Y_repetitions: {Y_repetitions}\n')
    f.write(f'; X_repetitions: {X_repetitions}\n')
    f.write(f'; layers: {layers}\n')
    f.write(f'; total_x: {total_x}\n')
    f.write(f'; total_y: {total_y}\n')

    f.write(f'; start gcode\n')
    f.write(f'; Relative positioning\n')
    f.write(f'G91\n; start at bottom-left corner\nG0 X0 Y0\n\n')

    stabilization_ystep = 0.3
    stabilization_n = 5

    # printing the construct
    n = layers

    def new_speed(CTS, layer):
      assert layer >= 0, 'layer must be >= 0'
      if layer <= 15:
        decreased_speed = 0.015 * layer * CTS
      else:
        decreased_speed = 0.02 * layer * CTS
      return CTS - decreased_speed

    for s in range(number_scaffold):
      f.write(f'; START scaffold {s+1}/{number_scaffold}\n')
      stabilization_lines(f, total_x, stabilization_ystep, CTS, stabilization_n)
      # printing one scaffold
      for l in range(n):
        f.write(f"\n; START layer {l+1}/{n}\n")
        last_j = Y_repetitions - 1
        f.write(f'; START Printing horizontally\n')
        speed = new_speed(CTS, l)
        for j in range(Y_repetitions):

          for i in range(X_repetitions):
            f.write(f'G1 X{2 * A + B} F{speed}\n')
            f.write(f'G1 Y{- 2 * A} F{speed}\n')
            f.write(f'G1 X{2 * A + B} F{speed}\n')
            f.write(f'G1 Y{2 * A} F{speed}\n')

          f.write(f'G1 X{2 * A + B} F{speed}\n')
          f.write(f'G1 Y{alpha * B} F{speed}\n')

          for i in range(X_repetitions):
            f.write(f'G1 X{- 2 * A - B} F{speed}\n')
            f.write(f'G1 Y{2 * A} F{speed}\n')
            f.write(f'G1 X{- 2 * A - B} F{speed}\n')
            f.write(f'G1 Y{- 2 * A} F{speed}\n')

          f.write(f'G1 X{- 2 * A - B} F{speed}\n')
          f.write(f'G1 Y{y_sep} F{speed}\n')

          if j == last_j:
            f.write(f'G1 X{A + B} F{speed}\n')
            f.write(f'G1 Y{- A} F{speed}\n')

        f.write(f'; END Printing horizontally\n')

        last_i = X_repetitions - 1

        f.write(f'; START Printing vertically\n')

        f.write(f'G1 Y{- 2 * A - alpha * B} F{speed}\n')

        for i in range(X_repetitions):

          for j in range(round(Y_repetitions)):
            f.write(f'G1 X{2 * A} F{speed}\n')
            f.write(f'G1 Y{- 2 * A - alpha * B} F{speed}\n')
            f.write(f'G1 X{- 2 * A} F{speed}\n')
            f.write(f'G1 Y{- 2 * A - alpha * B} F{speed}\n')

          f.write(f'G1 X{4 * A + B} F{speed}\n')

          for j in range(round(Y_repetitions)):
            f.write(f'G1 Y{2 * A + alpha * B} F{speed}\n')
            f.write(f'G1 X{- 2 * A} F{speed}\n')
            f.write(f'G1 Y{2 * A + alpha * B} F{speed}\n')
            f.write(f'G1 X{2 * A} F{speed}\n')

          f.write(f'G1 Y{2 * A + alpha * B} F{speed}\n')
          f.write(f'G1 X{B} F{speed}\n')
          f.write(f'G1 Y{- 2 * A - alpha * B} F{speed}\n')

          if i == last_i:
            f.write(f'G1 X{A} F{speed}\n')
            f.write(f'G1 Y{- total_y} F{speed}\n')
            f.write(f'G1 X{- total_x} F{speed}\n')
            f.write(f'G1 X{- 2 * A - B} F{speed}\n')
            if l < n-1:
              f.write(f'G1 Y{3 * A + alpha * B} F{speed}\n')
            else:
              f.write(f'G1 Y{-2 * stabilization_ystep * stabilization_n + 0.1} F{speed}\n')
      
      f.write(f'G1 X{total_x + offset_bw_scaffold} F{CTS}\n')
      f.write(f'; END Printing scaffold {s+1}\n')
    f.write(f'G90\n')
    f.write(f'M42 P0 S0\n')
    f.write(f'G0 Z10\n')
    f.write(f'; end gcode\n')

if __name__ == '__main__':
  main()